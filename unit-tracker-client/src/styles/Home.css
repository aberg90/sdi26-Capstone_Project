.topRow {
  display: grid;
  grid-template-columns: repeat(8, auto);
  margin-top: 1rem;
}
.categoryTabs {
  padding: 10px;
}

.calanderButtonGroup {
  width: 305px;
}
.calanderButton {
  width: 305px;
}

.bodyGrid {
  /* display: inline-grid; */
  display: grid;
  grid-template-columns: auto, auto;
  margin: 1px;
  padding: 1px;
  font-weight: bold;
}
/* https://www.freecodecamp.org/news/complete-guide-to-css-grid/ */
.staticGroup {
  background-color: rgb(121, 42, 5);
  padding: 9px;
  border-radius: 8px;
  grid-column: 1;
  box-sizing: border-box;
  width: 300px;
}

.currentTab {
  background-color: rgba(255, 233, 233, 0.3);
  padding: 10px;
  border-radius: 10px;
  color: white;
  font-weight: bold;
  margin-bottom: 10px;
  text-align: center;
  border: 1px solid black;
}

.staticEntry {
  background-color: rgba(255, 233, 233, 0.3);
  padding: 8px;
  border-radius: 10px;
  color: white;
  font-weight: bold;
  border: 1px solid black;
  width: 280px;
  box-sizing: border-box;
  word-wrap: break-word;
  margin-bottom: 2px;
}

.dynamicGroup {
  background-color: rgb(34, 4, 105);
  padding: 10px;
  border-radius: 8px;
  width: 87vw;
  grid-column: 2;
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  gap: 10px;
}
.dynamicEntries {
}

.dynamicTime {
  color: white;
  text-align: center;
  padding: 5px;
  background-color: rgba(255, 255, 255, 0.1);
  border-radius: 5px;
  height: 40px;
}

.dragDropContainer {
  grid-column: 1 / -1; /* This makes the container span all columns */
}

.bottomButtons {
  display: grid;
  grid-template-columns: 50vw, 50vw;
}

.entriesButton {
  grid-column: 1;
  width: 50vw;
}

.tasksButton {
  grid-column: 2;
  width: 50vw;
}
/* attempt grid setup */
/* .gridSetup {
  display: grid;
  padding: 10px;
  cursor: pointer;
} */

/* <div className='gridStyled'>
<div className='gridHeadersLayout'>
    <div className='nameHeader'>Item Name</div>----time, categories, nav buttons
    <div className='descriptionHeader'>Description Name</div>
    <div className='quantityHeader'>Quantity Name</div>
</div>
{items.map((item) => (-----static entries
    <div className='gridLineLayout'>
        <div onClick={() => viewItem(item)} className='item'>{item.name}</div>
        <div onClick={() => viewItem(item)} className='description'>{item.description.length > 100 ? `${item.description.substring(0, 100)}...` : item.description}</div>
        <div onClick={() => viewItem(item)} className='quantity'>{item.quantity}</div>
    </div>
))}
</div> */

/* .gridStyled {
  display: grid;
  padding: 10px;
  cursor: pointer;
}

 https://www.freecodecamp.org/news/complete-guide-to-css-grid/
.gridLineLayout {
  display: inline-grid;
  grid-template-columns: 150px 1fr 150px;
  margin: 1px;
  padding: 1px;
}
.gridHeadersLayout {
  display: inline-grid;
  grid-template-columns: 150px 1fr 150px;
  margin: 1px;
  padding: 1px;
  font-weight: bold;
}

.item {
  grid-column: 1;
}
.nameHeader{
  grid-column: 1;
}

.description {
  grid-column: 2;
}
.descriptionHeader{
  grid-column: 2;
}

.quantity {
  grid-column: 3;
}
.quantityHeader{
  grid-column: 3;
} */
